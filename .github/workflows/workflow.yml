# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildLinux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.1
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          sudo apt-get install libvlc-dev
          sudo apt-get install libvlccore-dev
          sudo apt-get install vlc-bin
          sudo apt-get install luajit
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxelib install hmm --quiet
          haxelib run hmm install
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile Linux
        run: haxelib run lime build Project.xml linux --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Linux Artifact
        uses: actions/upload-artifact@main
        with:
          name: linuxBuild
          path: 'export/release/linux/bin' 

  buildHTML5:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.1
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxelib install hmm --quiet
          haxelib run hmm install
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile HTML5
        run: haxelib run lime build Project.xml html5 --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish HTMl5 Artifact
        uses: actions/upload-artifact@main
        with:
          name: html5Build
          path: 'export/release/html5/bin' 

  buildWindows:
    runs-on: windows-latest
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main.3.0

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.1
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup C:/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxelib install hmm --quiet
          haxelib run hmm install
          haxelib list
        shell: cmd
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build windows --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@main
        with:
          name: windowsBuild
          path: export/release/windows/bin
  buildMac:
    runs-on: macos-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.1
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxelib install hmm --quiet
          haxelib run hmm install
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build mac --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@main
        with:
          name: macBuild
          path: export/release/macos/bin
