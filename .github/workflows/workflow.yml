# This is a basic workflow to help you get started with Actions

name: Build Game

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  buildLinux:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.4
      
      # Runs a set of commands using the runners shell
      - name: Install libvlc
        run: sudo apt-get install -y libvlc-dev libvlccore-dev
      
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib git hxcpp https://github.com/HaxeFoundation/hxcpp
          haxelib install lime
          haxelib install openfl
          haxelib --never install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib git linc_luajit https://github.com/Leather128/linc_luajit.git
          haxelib git hscript-improved https://github.com/FNF-CNE-Devs/hscript-improved
          haxelib git scriptless-polymod https://github.com/swordcube/scriptless-polymod
          haxelib install hxvlc
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib git fnf-modcharting-tools https://github.com/Vortex2Oblivion/FNF-Modcharting-Tools
          haxelib git flxanimate https://github.com/Vortex2Oblivion/flxanimate
          haxelib git hxNoise https://github.com/whuop/hxNoise
          haxelib git funkin.vis https://github.com/FNF-CNE-Devs/funkVis grig-test
          haxelib git grig.audio https://gitlab.com/haxe-grig/grig.audio
          haxelib install hxcpp-debug-server
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile Linux
        run: |
          cd $(haxelib libpath hxcpp)/tools/hxcpp
          haxe compile.hxml
          cd -
          haxelib --always run lime build Project.xml linux --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Linux Artifact
        uses: actions/upload-artifact@main
        with:
          name: linuxBuild
          path: "export/release/linux/bin"

  buildHTML5:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.4
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib git hxcpp https://github.com/HaxeFoundation/hxcpp
          haxelib install lime
          haxelib install openfl
          haxelib --never install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib git scriptless-polymod https://github.com/swordcube/scriptless-polymod
          haxelib git hscript-improved https://github.com/FNF-CNE-Devs/hscript-improved
          haxelib git openfl https://github.com/openfl/openfl
          haxelib git thx.semver https://github.com/fponticelli/thx.semver.git
          haxelib git fnf-modcharting-tools https://github.com/Vortex2Oblivion/FNF-Modcharting-Tools
          haxelib git flxanimate https://github.com/Vortex2Oblivion/flxanimate
          haxelib git hxNoise https://github.com/whuop/hxNoise
          haxelib git funkin.vis https://github.com/FNF-CNE-Devs/funkVis grig-test
          haxelib git grig.audio https://gitlab.com/haxe-grig/grig.audio
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile HTML5
        run: haxelib --always run lime build Project.xml html5 --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish HTMl5 Artifact
        uses: actions/upload-artifact@main
        with:
          name: html5Build
          path: "export/release/html5/bin"

  buildWindows:
    runs-on: windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.4
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup C:/haxelib
          haxelib git hxcpp https://github.com/Vortex2Oblivion/hxcpp-compiled
          haxelib install lime
          haxelib install openfl
          haxelib --never install flixel 
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib git linc_luajit https://github.com/Leather128/linc_luajit.git
          haxelib git hscript-improved https://github.com/FNF-CNE-Devs/hscript-improved
          haxelib git scriptless-polymod https://github.com/swordcube/scriptless-polymod
          haxelib git hxNoise https://github.com/whuop/hxNoise
          haxelib install hxvlc
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib git fnf-modcharting-tools https://github.com/Vortex2Oblivion/FNF-Modcharting-Tools
          haxelib git flxanimate https://github.com/Vortex2Oblivion/flxanimate
          haxelib git thx.semver https://github.com/fponticelli/thx.semver.git
          haxelib git funkin.vis https://github.com/FNF-CNE-Devs/funkVis grig-test
          haxelib git grig.audio https://gitlab.com/haxe-grig/grig.audio
          haxelib install hxcpp-debug-server
          haxelib list
        shell: cmd
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: |
          haxelib --always run lime build windows --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@main
        with:
          name: windowsBuild
          path: export/release/windows/bin
  
  buildMac:
    runs-on: macos-12

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.4
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib git hxcpp https://github.com/HaxeFoundation/hxcpp
          haxelib install lime
          haxelib install openfl
          haxelib --never install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib git linc_luajit https://github.com/Leather128/linc_luajit.git
          haxelib git hscript-improved https://github.com/FNF-CNE-Devs/hscript-improved
          haxelib git scriptless-polymod https://github.com/swordcube/scriptless-polymod
          haxelib install hxvlc
          haxelib git hxNoise https://github.com/whuop/hxNoise
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib git fnf-modcharting-tools https://github.com/Vortex2Oblivion/FNF-Modcharting-Tools
          haxelib git flxanimate https://github.com/Vortex2Oblivion/flxanimate
          haxelib git thx.semver https://github.com/fponticelli/thx.semver.git
          haxelib git funkin.vis https://github.com/FNF-CNE-Devs/funkVis grig-test
          haxelib git grig.audio https://gitlab.com/haxe-grig/grig.audio
          haxelib install hxcpp-debug-server
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: |
          cd $(haxelib libpath hxcpp)/tools/hxcpp
          haxe compile.hxml
          cd -
          haxelib --always run lime build mac --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@main
        with:
          name: macBuild
          path: export/release/macos/bin

  buildHashlink:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.4
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install lime
          haxelib install openfl
          haxelib --never install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib git hscript-improved https://github.com/FNF-CNE-Devs/hscript-improved
          haxelib git scriptless-polymod https://github.com/swordcube/scriptless-polymod
          haxelib git flxanimate https://github.com/Vortex2Oblivion/flxanimate
          haxelib git hxNoise https://github.com/whuop/hxNoise
          haxelib git thx.semver https://github.com/fponticelli/thx.semver.git
          haxelib git funkin.vis https://github.com/FNF-CNE-Devs/funkVis grig-test
          haxelib git grig.audio https://gitlab.com/haxe-grig/grig.audio
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile Hashlink
        run:
          haxelib --always run lime build Project.xml hl --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Hashlink Artifact
        uses: actions/upload-artifact@main
        with:
          name: hashlinkBuild
          path: "export/release/hl/bin"

